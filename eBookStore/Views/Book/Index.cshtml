@using BusinessObject.DTOs;
@model IEnumerable<BookDTO>

<div class="container-fluid mt-5">
    <h2 class="text-center mb-4">Book Management</h2>

    <div class="row">
        <div class="col-md-3">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">Add/Edit Book</h4>
                </div>
                <div class="card-body">
                    <input type="text" id="title" class="form-control mb-3" placeholder="Title" />
                    <input type="text" id="type" class="form-control mb-3" placeholder="Type" />
                    <select id="pubId" class="form-select mb-3"></select>
                    <input type="number" id="price" class="form-control mb-3" placeholder="Price" />
                    <input type="number" id="advance" class="form-control mb-3" placeholder="Advance" />
                    <input type="number" id="royalty" class="form-control mb-3" placeholder="Royalty" />
                    <input type="number" id="ytdSales" class="form-control mb-3" placeholder="Year-to-date Sales" />
                    <textarea id="notes" class="form-control mb-3" placeholder="Notes"></textarea>
                    <input type="date" id="publishedDate" class="form-control mb-3" placeholder="Published Date" />
                    <button id="addBook" class="btn btn-primary btn-lg w-100">Add</button>
                    <button id="cancelEdit" class="btn btn-secondary btn-lg w-100 d-none mt-2"
                        onclick="cancelEdit()">Cancel</button>
                </div>
            </div>
        </div>
        <div class="col-md-9">
            <div class="card shadow-sm">
                <div class="card-header bg-secondary text-white">
                    <h4 class="mb-0">Book List</h4>
                </div>
                <div class="card-body">
                    <div class="d-flex mb-3 input-group">
                        <input type="text" id="searchBook" class="form-control me-2" placeholder="Search Book" />
                        <div>
                            <label for="sortBy" class="form-label d-inline">Sort By:</label>
                            <select id="sortBy" class="form-select d-inline" onchange="loadBooks()"
                                style="width: auto;">
                                <option value="">Select</option>
                                <option value="title">Title A-Z</option>
                                <option value="title desc">Title Z-A</option>
                                <option value="type">Type A-Z</option>
                                <option value="type desc">Type Z-A</option>
                                <option value="price">Price (Lowest)</option>
                                <option value="price desc">Price (Highest)</option>
                                <option value="published_date">Published Date (Oldest)</option>
                                <option value="published_date desc">Published Date (Newest)</option>
                            </select>
                        </div>
                    </div>
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Title</th>
                                <th>Type</th>
                                <th>Publisher</th>
                                <th>Price</th>
                                <th>Advance</th>
                                <th>Royalty</th>
                                <th>Yth Sales</th>
                                <th>Notes</th>
                                <th>Published Date</th>
                                <th class="text-center">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="bookList"></tbody>
                    </table>
                </div>
                <div class="card-footer">
                    <nav aria-label="Page navigation">
                        <ul id="pagination" class="pagination justify-content-center"></ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal for Notifications -->
<div class="modal fade" id="alertModal" tabindex="-1" aria-labelledby="alertModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="alertModalLabel">Notification</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="alertMessage"></div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

<script>
    let currentPage = 1;
    const booksPerPage = 5;
    let allBooks = [];

    $(document).ready(function () {
        loadPublishers(); // Load publishers when the page loads
        loadBooks();

        $('#addBook').click(function () {
            @* if (!validateBookForm()) {
                return; // Nếu không hợp lệ, dừng lại
            } *@
            const book = {
                title: $('#title').val(),
                type: $('#type').val(),
                pub_id: $('#pubId').val(), // Get selected publisher ID
                price: $('#price').val(),
                advance: $('#advance').val(),
                royalty: $('#royalty').val(),
                ytd_sales: $('#ytdSales').val(),
                notes: $('#notes').val(),
                published_date: $('#publishedDate').val()
            };

            $.ajax({
                url: 'http://localhost:5259/odata/book',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(book),
                success: function () {
                    loadBooks();
                    clearInputs();
                    showAlert('Book added successfully', 'success');
                },
                error: function (error) {
                    showAlert('Error: ' + error.responseText, 'danger');
                }
            });
        });

        $('#searchBook').on('input', function () {
            const searchTerm = $(this).val().toLowerCase();
            const filteredBooks = allBooks.filter(book =>
                book.title.toLowerCase().includes(searchTerm)
            );
            displayBooks(filteredBooks);
            createPagination(Math.ceil(filteredBooks.length / booksPerPage));
        });
    });

    function loadBooks() {
        const sortBy = $('#sortBy').val();
        let url = 'http://localhost:5259/odata/book';

        if (sortBy) {
            url += `?$orderby=${sortBy}`; // Append the sort order to the OData URL
        }

        $.ajax({
            url: url,
            type: 'GET',
            success: function (data) {
                allBooks = data;
                displayBooks(allBooks);
                createPagination(Math.ceil(allBooks.length / booksPerPage));
            },
            error: function (error) {
                showAlert('Error: ' + error.responseText, 'danger');
            }
        });
    }

    // Load publishers from API and populate the dropdown
    function loadPublishers() {
        $.ajax({
            url: 'http://localhost:5259/odata/publisher',
            type: 'GET',
            success: function (data) {
                $('#pubId').empty();
                $('#pubId').append('<option value="">Select Publisher</option>');
                $.each(data, function (i, publisher) {
                    $('#pubId').append('<option value="' + publisher.pub_id + '">' + publisher.publisher_name + '</option>');
                });
            },
            error: function (error) {
                showAlert('Error loading publishers: ' + error.responseText, 'danger');
            }
        });
    }

    function displayBooks(books) {
        const paginatedBooks = books.slice((currentPage - 1) * booksPerPage, currentPage * booksPerPage);

        $('#bookList').empty();
        $.each(paginatedBooks, function (i, book) {
            $('#bookList').append(`
            <tr>
                <td>${book.book_id}</td>
                <td>${book.title}</td>
                <td>${book.type}</td>
                <td>${book.pub_name}</td>
                <td>${book.price}</td>
                <td>${book.advance}</td>
                <td>${book.royalty}</td>
                <td>${book.ytd_sales}</td>
                <td>${book.notes}</td>
                <td>${new Date(book.published_date).toLocaleDateString()}</td>
                <td class="text-center">
                    <div class="d-flex justify-content-center">
                        <button class="btn btn-outline-warning btn-sm me-2" onclick="getBook(${book.book_id})">Edit</button>
                        <button class="btn btn-outline-danger btn-sm" onclick="deleteBook(${book.book_id})">Delete</button>
                    </div>
                </td>
            </tr>
        `);
        });

        if (paginatedBooks.length === 0) {
            $('#bookList').append(`<tr><td colspan="10" class="text-center">No books found</td></tr>`);
        }
    }

    function createPagination(totalPages) {
        $('#pagination').empty();
        const pageLinks = [];

        if (currentPage > 1) {
            pageLinks.push(`<li class="page-item"><a class="page-link" href="#" onclick="changePage(${currentPage - 1})">«</a></li>`);
        }

        for (let i = 1; i <= totalPages; i++) {
            pageLinks.push(`<li class="page-item ${i === currentPage ? 'active' : ''}"><a class="page-link" href="#" onclick="changePage(${i})">${i}</a></li>`);
        }

        if (currentPage < totalPages) {
            pageLinks.push(`<li class="page-item"><a class="page-link" href="#" onclick="changePage(${currentPage + 1})">»</a></li>`);
        }

        $('#pagination').append(pageLinks.join(''));
    }

    function changePage(page) {
        currentPage = page;
        displayBooks(allBooks);
        createPagination(Math.ceil(allBooks.length / booksPerPage));
    }

    function getBook(id) {
        $.ajax({
            url: 'http://localhost:5259/odata/book/' + id,
            type: 'GET',
            success: function (book) {
                $('#title').val(book.title);
                $('#type').val(book.type);
                $('#pubId').val(book.pub_id);
                $('#price').val(book.price);
                $('#advance').val(book.advance);
                $('#royalty').val(book.royalty);
                $('#ytdSales').val(book.ytd_sales);
                $('#notes').val(book.notes);
                $('#publishedDate').val(new Date(book.published_date).toISOString().split('T')[0]);
                $('#addBook').text('Update').removeClass('btn-primary').addClass('btn-success');
                $('#cancelEdit').removeClass('d-none'); // Show the Cancel button

                // Change the click handler to update user
                $('#addBook').off('click').on('click', function () {
                    updateBook(id);
                });
            },
            error: function (error) {
                showAlert('Error: ' + error.responseText, 'danger');
            }
        });
    }

    function updateBook(id) {
        @* if (!validateBookForm()) {
            return; // Nếu không hợp lệ, dừng lại
        } *@
        const book = {
            title: $('#title').val(),
            type: $('#type').val(),
            pub_id: $('#pubId').val(),
            price: $('#price').val(),
            advance: $('#advance').val(),
            royalty: $('#royalty').val(),
            ytd_sales: $('#ytdSales').val(),
            notes: $('#notes').val(),
            published_date: $('#publishedDate').val()
        };

        $.ajax({
            url: 'http://localhost:5259/odata/book/' + id,
            type: 'PUT',
            contentType: 'application/json',
            data: JSON.stringify(book),
            success: function () {
                loadBooks();
                clearInputs();
                resetAddButton();
                showAlert('Books updated successfully', 'success');
            },
            error: function (error) {
                showAlert('Error: ' + error.responseText, 'danger');
            }
        });
    }

    // Function to handle canceling the edit
    function cancelEdit() {
        clearInputs(); // Clear input fields
        resetAddButton(); // Reset to add mode
    }

    // Resetting the button and hiding cancel
    function resetAddButton() {
        $('#addUser').text('Add').removeClass('btn-success').addClass('btn-primary'); // Set button back to Add
        $('#cancelEdit').addClass('d-none'); // Hide the Cancel button
    }

    function deleteBook(id) {
        if (confirm('Are you sure you want to delete this book?')) {
            $.ajax({
                url: 'http://localhost:5259/odata/book/' + id,
                type: 'DELETE',
                success: function () {
                    lo();
                    showAlert('Book deleted successfully', 'success');
                },
                error: function (error) {
                    showAlert('Error: ' + error.responseText, 'danger');
                }
            });
        }
    }

    @* function validateBookForm() {
        let title = $('#title').val();
        let publisher = $('#pubId').val();
        let price = $('#price').val();

        // Kiểm tra các trường không được bỏ trống
        if (!title || !author || !price) {
            showAlert('All fields are required.', 'danger');
            return false;
        }

        // Kiểm tra giá phải là số dương
        if (price <= 0) {
            showAlert('Price must be a positive number.', 'danger');
            return false;
        }

        return true; // Nếu tất cả các kiểm tra đều hợp lệ
    } *@

    function clearInputs() {
        $('#title').val('');
        $('#type').val('');
        $('#pubId').val('');
        $('#price').val('');
        $('#advance').val('');
        $('#royalty').val('');
        $('#ytdSales').val('');
        $('#notes').val('');
        $('#publishedDate').val('');
    }

    function showAlert(message, type) {
        $('#alertMessage').text(message);
        $('#alertModal').modal('show');
    }
</script>

<style>
    /* Center the buttons within the Actions column */
    .table td:last-child {
        text-align: center;
        /* Center the text in the last column */
    }

    .table button {
        margin: 0 auto;
        /* Center the buttons */
    }

    .input-group {
        display: flex;
        align-items: center;
        /* Căn giữa theo chiều dọc */
    }

    .input-group input,
    .input-group select {
        height: 38px;
        /* Chiều cao khung giống nhau */
    }

    .form-label {
        margin-right: 5px;
        /* Khoảng cách giữa label và select */
    }
</style>
