@using BusinessObject.DTOs;
@model IEnumerable<UserDTO>

<div class="container-fluid mt-5">
    <h2 class="text-center mb-4">User Management</h2>

    <div class="row">
        <div class="col-md-3">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">Add/Edit User</h4>
                </div>
                <div class="card-body">
                    <input type="text" id="firstName" class="form-control mb-3" placeholder="First Name" />
                    <input type="text" id="middleName" class="form-control mb-3" placeholder="Middle Name" />
                    <input type="text" id="lastName" class="form-control mb-3" placeholder="Last Name" />
                    <input type="email" id="email" class="form-control mb-3" placeholder="Email Address" />
                    <input type="text" id="source" class="form-control mb-3" placeholder="Source" />
                    <select id="roleId" class="form-select mb-3"></select>
                    <select id="pubId" class="form-select mb-3"></select>
                    <input type="date" id="hireDate" class="form-control mb-3" placeholder="Hire Date" />
                    <input type="password" id="password" class="form-control mb-3" placeholder="Password" />
                    <button id="addUser" class="btn btn-primary btn-lg w-100">Add</button>
                    <button id="cancelEdit" class="btn btn-secondary btn-lg w-100 d-none mt-2"
                        onclick="cancelEdit()">Cancel</button>
                </div>
            </div>
        </div>

        <div class="col-md-9">
            <div class="card shadow-sm">
                <div class="card-header bg-secondary text-white">
                    <h4 class="mb-0">User List</h4>
                </div>
                <div class="card-body">
                    <div class="d-flex mb-3 input-group">
                        <input type="text" id="searchUser" class="form-control me-2" placeholder="Search User" />
                        <div>
                            <label for="sortBy" class="form-label d-inline">Sort By:</label>
                            <select id="sortBy" class="form-select d-inline" onchange="loadUsers()"
                                style="width: auto;">
                                <option value="">Select</option>
                                <option value="first_name">First Name A-Z</option>
                                <option value="first_name desc">First Name Z-A</option>
                                <option value="last_name">Last Name A-Z</option>
                                <option value="last_name desc">Last Name Z-A</option>
                                <option value="email_address">Email A-Z</option>
                                <option value="email_address desc">Email Z-A</option>
                                <option value="hire_date">Hire Date (Oldest)</option>
                                <option value="hire_date desc">Hire Date (Newest)</option>
                            </select>
                        </div>
                    </div>
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Source</th>
                                <th>Role</th>
                                <th>Publisher</th>
                                <th>Hire Date</th>
                                <th class="text-center">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="userList"></tbody>
                    </table>
                </div>
                <div class="card-footer">
                    <nav aria-label="Page navigation">
                        <ul id="pagination" class="pagination justify-content-center"></ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal for Notifications -->
<div class="modal fade" id="alertModal" tabindex="-1" aria-labelledby="alertModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="alertModalLabel">Notification</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="alertMessage"></div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

<script>
    let currentPage = 1;
    const usersPerPage = 5;
    let allUsers = [];

    $(document).ready(function () {
        loadRoles(); // Load roles when the page loads
        loadPublishers(); // Load publishers when the page loads
        loadUsers();

        $('#addUser').click(function () {
            if (!validateForm()) {
                return; // Nếu không hợp lệ, dừng lại
            }
            const user = {
                email_address: $('#email').val(),
                password: $('#password').val(),
                source: $('#source').val(),
                first_name: $('#firstName').val(),
                middle_name: $('#middleName').val(),
                last_name: $('#lastName').val(),
                role_id: $('#roleId').val(),
                pub_id: $('#pubId').val(),
                hire_date: $('#hireDate').val()
            };

            $.ajax({
                url: 'http://localhost:5259/odata/user',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(user),
                success: function () {
                    loadUsers();
                    clearInputs();
                    showAlert('User added successfully', 'success');
                },
                error: function (error) {
                    showAlert('Error: ' + error.responseText, 'danger');
                }
            });
        });

        $('#searchUser').on('input', function () {
            const searchTerm = $(this).val().toLowerCase();
            const filteredUsers = allUsers.filter(user =>
                user.email_address.toLowerCase().includes(searchTerm) ||
                user.first_name.toLowerCase().includes(searchTerm) ||
                user.last_name.toLowerCase().includes(searchTerm)
            );
            displayUsers(filteredUsers);
            createPagination(Math.ceil(filteredUsers.length / usersPerPage));
        });
    });

    function loadUsers() {
        const searchTerm = $('#searchUser').val().toLowerCase();
        const sortBy = $('#sortBy').val(); // Lấy giá trị sắp xếp

        // Xây dựng URL OData với các tham số
        let url = 'http://localhost:5259/odata/user';

        // Thêm lọc
        if (searchTerm) {
            url += `?$filter=contains(tolower(first_name), '${searchTerm}') or contains(tolower(last_name), '${searchTerm}') or contains(tolower(email_address), '${searchTerm}')`;
        }

        // Thêm sắp xếp
        if (sortBy) {
            url += (url.includes('?') ? '&' : '?') + `$orderby=${sortBy}`;
        }

        $.ajax({
            url: url,
            type: 'GET',
            success: function (data) {
                allUsers = data;
                displayUsers(allUsers);
                createPagination(Math.ceil(allUsers.length / usersPerPage));
            },
            error: function (error) {
                showAlert('Error: ' + error.responseText, 'danger');
            }
        });
    }

    function loadRoles() {
        $.ajax({
            url: 'http://localhost:5259/odata/role',
            type: 'GET',
            success: function (data) {
                $('#roleId').empty();
                $('#roleId').append('<option value="">Select Role</option>');
                $.each(data, function (i, role) {
                    $('#roleId').append('<option value="' + role.role_id + '">' + role.role_desc + '</option>');
                });
            },
            error: function (error) {
                showAlert('Error loading roles: ' + error.responseText, 'danger');
            }
        });
    }

    function loadPublishers() {
        $.ajax({
            url: 'http://localhost:5259/odata/publisher',
            type: 'GET',
            success: function (data) {
                $('#pubId').empty();
                $('#pubId').append('<option value="">Select Publisher</option>');
                $.each(data, function (i, publisher) {
                    $('#pubId').append('<option value="' + publisher.pub_id + '">' + publisher.publisher_name + '</option>');
                });
            },
            error: function (error) {
                showAlert('Error loading publishers: ' + error.responseText, 'danger');
            }
        });
    }

    function displayUsers(users) {
        const paginatedUsers = users.slice((currentPage - 1) * usersPerPage, currentPage * usersPerPage);

        $('#userList').empty();
        $.each(paginatedUsers, function (i, user) {
            $('#userList').append(`
                <tr>
                    <td>${user.user_id}</td>
                    <td>${user.first_name} ${user.middle_name} ${user.last_name}</td>
                    <td>${user.email_address}</td>
                    <td>${user.source}</td>
                    <td><span class="badge bg-info">${user.role_desc}</span></td>
                    <td>${user.publisher_name}</td>
                    <td>${new Date(user.hire_date).toLocaleDateString()}</td>
                    <td class="text-center">
    <div class="d-flex justify-content-center">
        <button class="btn btn-outline-warning btn-sm me-2" onclick="getUser(${user.user_id})">Edit</button>
        <button class="btn btn-outline-danger btn-sm" onclick="deleteUser(${user.user_id})">Delete</button>
    </div>
</td>
                </tr>
            `);
        });

        if (users.length === 0) {
            $('#userList').append(`<tr><td colspan="8" class="text-center">No users found</td></tr>`);
        }
    }

    function createPagination(totalPages) {
        $('#pagination').empty();
        const pageLinks = [];

        if (currentPage > 1) {
            pageLinks.push(`<li class="page-item"><a class="page-link" href="#" onclick="changePage(${currentPage - 1})">«</a></li>`);
        }

        for (let i = 1; i <= totalPages; i++) {
            pageLinks.push(`<li class="page-item ${i === currentPage ? 'active' : ''}"><a class="page-link" href="#" onclick="changePage(${i})">${i}</a></li>`);
        }

        if (currentPage < totalPages) {
            pageLinks.push(`<li class="page-item"><a class="page-link" href="#" onclick="changePage(${currentPage + 1})">»</a></li>`);
        }

        $('#pagination').append(pageLinks.join(''));
    }

    function changePage(page) {
        currentPage = page;
        displayUsers(allUsers);
        createPagination(Math.ceil(allUsers.length / usersPerPage));
    }

    function getUser(id) {
        $.ajax({
            url: 'http://localhost:5259/odata/user/' + id,
            type: 'GET',
            success: function (user) {
                $('#firstName').val(user.first_name);
                $('#middleName').val(user.middle_name);
                $('#lastName').val(user.last_name);
                $('#email').val(user.email_address);
                $('#source').val(user.source);
                $('#roleId').val(user.role_id);
                $('#pubId').val(user.pub_id);
                $('#hireDate').val(new Date(user.hire_date).toISOString().split('T')[0]);
                $('#addUser').text('Update').removeClass('btn-primary').addClass('btn-success');
                $('#cancelEdit').removeClass('d-none'); // Show the Cancel button

                // Change the click handler to update user
                $('#addUser').off('click').on('click', function () {
                    updateUser(id);
                });
            },
            error: function (error) {
                showAlert('Error: ' + error.responseText, 'danger');
            }
        });
    }

    function updateUser(id) {
        if (!validateForm()) {
            return; // Nếu không hợp lệ, dừng lại
        }
        const user = {
            email_address: $('#email').val(),
            password: $('#password').val(),
            source: $('#source').val(),
            first_name: $('#firstName').val(),
            middle_name: $('#middleName').val(),
            last_name: $('#lastName').val(),
            role_id: $('#roleId').val(),
            pub_id: $('#pubId').val(),
            hire_date: $('#hireDate').val()
        };

        $.ajax({
            url: 'http://localhost:5259/odata/user/' + id,
            type: 'PUT',
            contentType: 'application/json',
            data: JSON.stringify(user),
            success: function () {
                loadUsers();
                clearInputs();
                resetAddButton(); // Reset to add mode
                showAlert('User updated successfully', 'success');
            },
            error: function (error) {
                showAlert('Error: ' + error.responseText, 'danger');
            }
        });
    }

    // Function to handle canceling the edit
    function cancelEdit() {
        clearInputs(); // Clear input fields
        resetAddButton(); // Reset to add mode
    }

    // Resetting the button and hiding cancel
    function resetAddButton() {
        $('#addUser').text('Add').removeClass('btn-success').addClass('btn-primary'); // Set button back to Add
        $('#cancelEdit').addClass('d-none'); // Hide the Cancel button
    }

    function deleteUser(id) {
        if (confirm('Are you sure you want to delete this user?')) {
            $.ajax({
                url: 'http://localhost:5259/odata/user/' + id,
                type: 'DELETE',
                success: function () {
                    loadUsers();
                    showAlert('User deleted successfully', 'success');
                },
                error: function (error) {
                    showAlert('Error: ' + error.responseText, 'danger');
                }
            });
        }
    }

    function clearInputs() {
        $('#firstName').val('');
        $('#middleName').val('');
        $('#lastName').val('');
        $('#email').val('');
        $('#source').val('');
        $('#roleId').val('');
        $('#pubId').val('');
        $('#hireDate').val('');
        $('#password').val('');
    }

    function showAlert(message, type) {
        $('#alertMessage').text(message);
        $('#alertModal').modal('show');
    }

    function validateForm() {
        let email = $('#email').val();
        let firstName = $('#firstName').val();
        let lastName = $('#lastName').val();
        let password = $('#password').val();

        // Kiểm tra các trường không được bỏ trống
        if (!firstName || !lastName || !email || !password) {
            showAlert('All fields are required.', 'danger');
            return false;
        }

        // Kiểm tra độ dài mật khẩu (ít nhất 6 ký tự)
        if (password.length < 6) {
            showAlert('Password must be at least 6 characters long.', 'danger');
            return false;
        }

        return true; // Nếu tất cả các kiểm tra đều hợp lệ
    }
</script>

<style>
    /* Center the buttons within the Actions column */
    .table td:last-child {
        text-align: center;
        /* Center the text in the last column */
    }

    .table button {
        margin: 0 auto;
        /* Center the buttons */
    }

    .input-group {
        display: flex;
        align-items: center;
        /* Căn giữa theo chiều dọc */
    }

    .input-group input,
    .input-group select {
        height: 38px;
        /* Chiều cao khung giống nhau */
    }

    .form-label {
        margin-right: 5px;
        /* Khoảng cách giữa label và select */
    }
</style>
